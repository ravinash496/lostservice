<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="LVF Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/xml</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">ec2-52-36-126-217.us-west-2.compute.amazonaws.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511883953000</longProp>
        <longProp name="ThreadGroup.end_time">1511883953000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>300.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Washington&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Beddington&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Ridge&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Ln&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;58&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04622&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Cumberland&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;New Gloucester&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Witham&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;35&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04260&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Androscoggin&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Lisbon&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Anthony&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;St&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;3&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04252&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 4 Fuzzy" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Aroostook&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Madawaska&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Lake Shore&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;963&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04732&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2035251369">&lt;approximateLocationUsed message=&quot;An exact match could not be found, but a point in near accuracy was used to find the service boundary.&quot;/&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 5" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Aroostook&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Madawaska&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Lake Shore&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;963&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04773&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 6" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;York&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Dayton&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Juniper&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Ln&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;106&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04005&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 7" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Somerset&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Canaan&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Hill&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;1370&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04924&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 8" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Sagadahoc&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Bath&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Andrews&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;6&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04530&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 9" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Oxford&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Sumner&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Arthur Allen&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Rd&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;110&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04292&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LVF 10" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;findService xmlns=&quot;urn:ietf:params:xml:ns:lost1&quot; validateLocation=&quot;true&quot;&gt;&#xd;
   &lt;location id=&quot;a8bc0513-7cd9-47fe-af02-de65299e2ad6&quot; profile=&quot;civic&quot;&gt;&#xd;
      &lt;civ:civicAddress xmlns:civ=&quot;urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr&quot;&gt;&#xd;
         &lt;civ:country&gt;US&lt;/civ:country&gt;&#xd;
         &lt;civ:A1&gt;ME&lt;/civ:A1&gt;&#xd;
         &lt;civ:A2&gt;Lincoln&lt;/civ:A2&gt;&#xd;
         &lt;civ:A3&gt;Boothbay Harbor&lt;/civ:A3&gt;&#xd;
         &lt;civ:RD&gt;Townsend&lt;/civ:RD&gt;&#xd;
         &lt;civ:STS&gt;Ave&lt;/civ:STS&gt;&#xd;
         &lt;civ:HNO&gt;310&lt;/civ:HNO&gt;&#xd;
         &lt;civ:PC&gt;04538&lt;/civ:PC&gt;&#xd;
      &lt;/civ:civicAddress&gt;&#xd;
   &lt;/location&gt;&#xd;
   &lt;service&gt;urn:nena:service:sos&lt;/service&gt;&#xd;
&lt;/findService&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="431926868">&lt;valid&gt;country a1 a2 a3 rd sts hno pc&lt;/valid&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1364538141">findServiceResponse</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\cleppanen\Desktop\LVFSummary.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\cleppanen\Desktop\LVFTable.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
