{
	"variables": [],
	"info": {
		"name": "ExpectedURI tests",
		"_postman_id": "512eda05-8216-c3e2-1849-5b24fc2a6cd6",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "http://ec2-52-36-126-217.us-west-2.compute.amazonaws.com/",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Current type under test: \" + data.Type] = true === true;",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"var jsonObject = xml2Json(responseBody);",
							"",
							"var locationUsedId = jsonObject.findServiceResponse.locationUsed.$.id;",
							"tests[\"location id used matches\"] = locationUsedId === data.Expected_locationUsed_id;",
							"",
							"if (data.Type == \"circle\") {",
							"    var mappingElements = jsonObject.findServiceResponse.mapping.length;",
							"    var warningMessage = jsonObject.findServiceResponse.warnings.tooManyMappings.$.message;",
							"    var warningSource = jsonObject.findServiceResponse.warnings.$.source;",
							"    //Extra Tests for Circle",
							"    tests[\"100 mapping elements in response\"] = mappingElements === data.Expected_mappingElementsCount;",
							"    tests[\"warning message received\"] = warningMessage === data.Expected_warningMessageText;",
							"    tests[\"warning source is: authoritative.example\"] = warningSource === data.Expected_warning_source;",
							"    ",
							"    //Loop through all those messages and validate our URIs are correct.",
							"    for (var i = 0; i < mappingElements; i++) {",
							"        console.log(data.Expected_URI[i]);",
							"        tests[\"Mapping URI Matches: \" + data.Expected_URI[i]] = data.Expected_URI[i] === jsonObject.findServiceResponse.mapping[i].uri;",
							"    }",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var Type = data.Type;",
							"var Pos1 = data.Pos1;",
							"var Pos2 = data.Pos2;",
							"var Pos3 = data.Pos3;",
							"var Pos4 = data.Pos4;",
							"var Radius = data.Radius;",
							"var semiMajorAxis = data.semiMajorAxis;",
							"var semiMinorAxis = data.semiMinorAxis;",
							"var orientation = data.orientation;",
							"var innerRadius = data.innerRadius;",
							"var outerRadius = data.outerRadius;",
							"var startAngle = data.startAngle;",
							"var openingAngle = data.openingAngle;",
							"var Service = data.Service;",
							"",
							"if (Type == \"point\")",
							"{",
							"    postman.setEnvironmentVariable(\"Body\", '<?xml version=\"1.0\" encoding=\"utf-8\"?><findService xmlns=\"urn:ietf:params:xml:ns:lost1\" serviceBoundary=\"reference\"><location id=\"a9f93608-1092-42c6-9423-c0167e11398d\" profile=\"geodetic-2d\"><gml:Point xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos>{{Pos1}}</gml:pos></gml:Point></location><service>{{Service}}</service></findService>');",
							"}",
							"if (Type == \"circle\")",
							"{",
							"    postman.setEnvironmentVariable(\"Body\", '<findService xmlns=\"urn:ietf:params:xml:ns:lost1\" serviceBoundary=\"reference\"><location id=\"a9f93608-1092-42c6-9423-c0167e11398d\" profile=\"geodetic-2d\"><gs:Circle xmlns:gs=\"http://www.opengis.net/pidflo/1.0\" xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:pos>{{Pos1}}</gml:pos><gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">{{Radius}}</gs:radius></gs:Circle></location><service>{{Service}}</service></findService>');",
							"}",
							"if (Type == \"polygon\")",
							"{",
							"    postman.setEnvironmentVariable(\"Body\", '<findService xmlns=\"urn:ietf:params:xml:ns:lost1\" serviceBoundary=\"reference\"><location id=\"9636f44a-f7d1-4b60-a05c-2c8dda628006\" profile=\"geodetic-2d\"><gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"urn:ogc:def:crs:EPSG::4326\"><gml:exterior><gml:LinearRing><gml:pos>{{Pos1}}</gml:pos><gml:pos>{{Pos2}}</gml:pos><gml:pos>{{Pos3}}</gml:pos><gml:pos>{{Pos4}}</gml:pos><gml:pos>{{Pos5}}</gml:pos></gml:LinearRing></gml:exterior></gml:Polygon></location><service>{{Service}}</service></findService>')",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://ec2-52-36-126-217.us-west-2.compute.amazonaws.com/",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{Body}}\n"
				},
				"description": ""
			},
			"response": []
		}
	]
}