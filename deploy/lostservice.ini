[Database]
host:
port:
dbname:
username:
password:

# Transaction and dianostic logging will kick in If this section is commented out or the related env. variables are set.
# [LoggingDB]
# host:
# port:
# dbname:
# username:
# password:

[Service]
source_uri: authoritative.example


# Layername: Setting discription
# service_expires_policy - Policy setting that determines if the response is allowed to be cached or not, and how long it can be cached for in minutes.
#                          Accepted Values: NoCache, NoExpiration, TimeSpan
# service_expires_timespan - Timespan setting representing the number of minutes the response should be cached for in minutes.

esbems: {'service_expire_policy': 'NoCache', 'service_cache_timespan': '15'}
esbpsap: {'service_expire_policy': 'NoCache', 'service_cache_timespan': '15'}
esbfire: {'service_expire_policy': 'NoCache', 'service_cache_timespan': '15'}

civvy_map : {
            "streets" : {
                "extras" : {
                    "schema" : "active"
                },
                "collection" : "roadcenterline",
                "geometry" : "wkb_geometry",
                "ref_id" : "srcunqid",
                "label" : ["predir", "pretype", "strname", "posttype", "postdir"],
                "properties" : {
                    "country" : ["countryl", "countryr"],
                    "a1" : ["statel", "stater"],
                    "a2" : ["countyl", "countyr"],
                    "a3" : ["incmunil", "incmunir", "uninccomml", "uninccommr"],
                    "a6" : "strname",
                    "rd" : "strname",
                    "prd" : "predir",
                    "pod" : "postdir",
                    "pom" : "postmod",
                    "sts" : "posttype",
                    "hno" : ["fromaddl", "toaddl", "fromaddr", "toaddr"],
                    "hnp" : ["addrngprel", "addrngprer"],
                    "pc" : ["zipcodel", "zipcoder"],
                    "pcn": ["postcomml", "postcommr"],
                    "stp": "pretype",
                    "stps": "pretypesep",
                    "prm": "premod"
                },
                "sides" : {
                    "left" : [
                        "statel", "countyl", "incmunil", "uninccomml", "fromaddl", "toaddl", "zipcodel"
                    ],
                    "right" : [
                        "stater", "countyr" , "incmunir", "uninccomml", "fromaddr", "toaddr", "zipcoder"
                    ]
                },
                "ranges" : {
                    "bottom" : [ "fromaddl", "fromaddr" ],
                    "top" : [ "toaddl", "toaddr" ]
                }
            },
            "points" : {
                "extras" : {
                    "schema" : "active"
                },
                "collection" : "ssap",
                "geometry" : "wkb_geometry",
                "ref_id" : "srcunqid",
                "label" : ["addnum", "predir", "pretype", "strname", "posttype", "postdir"],
                "properties" : {
                    "country" : "country",
                    "a1" : "state",
                    "a2" : "county",
                    "a3" : ["incmuni", "uninccomm"],
                    "a6" : "strname",
                    "lmpk": "landmark",
                    "mp" : "milepost",
                    "rd" : "strname",
                    "prd" : "predir",
                    "pod" : "postdir",
                    "pom" : "postmod",
                    "sts" : "posttype",
                    "hno" : "addnum",
                    "hnp" : "addnumpre",
                    "hns" : "addnumsuf",
                    "lmk" : "landmark",
                    "pc" : "zipcode",
                    "loc": "location",
                    "flr": "floor",
                    "stp": "pretype",
                    "stps": "pretypesep",
                    "unit": "unit",
                    "pcn": "postcomm",
                    "prm": "premod",
                    "mp": "milepost",
                    "bld": "building",
                    "room": "room",
                    "seat": "seat",
                    "plc": "placetype"
                },
                "appendix" : "adddatauri"
            }
        }

#Determines if we use fuzzy matches from civic address queries or not.
use_fuzzy_match: True
# The maximum score we allow from civic address locator results to use for fuzzy matching.
find_civic_address_maximum_score: 1.0


[AddtionalData]
service_urn: urn:nena:service:adddatauri
data_table: ssap
buffer_meters = 60
return_limit_number = 100

[Policy]
#Offset distance of road centerline results from civic address query.
offset_distance_from_centerline=10
# Accepted Values: SearchUsingPolygon, SearchUsingCentroid
polygon_search_mode_policy:SearchUsingPolygon
# Accepted Values: ReturnFirst, ReturnAreaMajority, ReturnLimitWarning
polygon_multiple_match_policy:ReturnAreaMajority
# Only applies when polygon_multiple_match_policy Is set to "ReturnLimitWarning"
# If results exceed the value, the number of results returned is equal to the value and a warning is included in the response.
polygon_return_limit_number:5

# Accepted Values: ReturnFirst, ReturnLimitWarning, ReturnError
point_multiple_match_policy:ReturnFirst
# Only applies when point_multiple_match_policy Is set to "ReturnLimitWarning"
# If results exceed the value, the number of results returned is equal to the value and a warning is included in the response.
point_return_limit_number:5

# If True and no results are found after the first query, we add a buffer and re-query
service_boundary_proximity_search_policy:False
service_boundary_proximity_buffer:100+
# If true, simplify service boundary response.
service_boundary_simplify_result:True
service_boundary_simplify_tolerance:10

#MatchRequest,ReturnReference,ReturnValue,ReturnNothing
service_boundary_return_geodetic_override:MatchRequest
service_boundary_return_civic_override:MatchRequest

#Maps a urn to  a uri.  To be returned when the search for a service using the civic address would otherwise
# return notFound. Each item in the json array should have a unique urn.
# Currently there is only one mode supported : "OverrideRoute", which simply returns a static uri for a particular urn
default_routing_civic_policy : {
   "default_routes":[
      {
         "mode":"OverrideRoute",
         "urn":"urn:nena:service:sos",
         "uri":"sip:sos@oakgrove.ngesi.maine.gov"
      },
      {
         "mode":"ExistingRoute",
         "urn":"urn:nena:service:sos.police",
         "boundaryid":"{AFF10CC6-54F2-4A43-AE12-D8881CD550A4}"
      },
	  {
		"mode": "CivicMatchingRules",
		"urn": "urn:nena:service:sos.fire",
		"rules": [
			{
				"name": "Rule Number One",
				"conditions": {"A2": "Waldo"},
				"mode": "OverrideRoute",
				"uri": "SIP:+2075555583@strongFD.ngesi.maine.gov"
			},
			{
				"name": "Another Rule",
				"conditions": {"A2": "Piscataquis" },
				"mode": "ExistingRoute",
				"boundaryid" : "{83B81936-29F7-441C-B3F1-5ECE9FA80E50}"
			}
		]
	  }
   ]
    }

[Coverage]
check_coverage:False
civic_coverage_table: civiccoverage
geodetic_coverage_table: coverage_region
parent_ecrf: some.parent.ecrf.example

[Logging]
logfile: ./lostservice.log
# for each addtional logging service add 'serviceX':'http://URL'
#logging_services:{'service':'http://lp-cleppanen-2:8088/mockLoggingBinding'}
logging_services:{}
